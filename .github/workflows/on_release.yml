# This workflows will:
#   - create a release from a tag
#   - upload a Python Package using Twine when a release is created
name: Bump version
on:
  # release:
  #   types: [published]
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0

jobs:
  Github-release:
    if: |
         !contains(github.event.head_commit.message, 'bump:')
         && !contains(github.event.head_commit.message, 'ci:')
         && !contains(github.event.head_commit.message, '[NO_PUB]')
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: true
          body_path: CHANGELOG.md
  Publish:
    name: Publish to PyPi
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache packages
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ matrix.python-version }}-package-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ matrix.python-version }}-package-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine gitpython
          python -m pip install -r requirements-dev.txt
          pip install -e ./[devel]
      - name: Test
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          scripts/tests.sh
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./tests/coverage.xml
          files: ./tests/coverage1.xml,./tests/coverage2.xml
          directory: ./tests/coverage/reports/
          flags: unittests
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          echo "GitHub ref ${GITHUB_REF}"
          VERSION=`echo "${GITHUB_REF}" | cut -f 3 -d "/"`
          LAST_PACKAGE_VERSION=`pip show ec2_compare | grep 'Version:' | grep -Po '\d+\.\d+\.\d+(\.\d+)?'`
          PACKAGE_VERSION=`echo "${LAST_PACKAGE_VERSION}" | awk 'BEGIN{FS=OFS="."}{$4=$4+1; print $0;}'`
          echo Builder version: ${VERSION}
          echo Last package version: ${LAST_PACKAGE_VERSION}
          echo Build package version: ${PACKAGE_VERSION}
          echo "##[set-output name=build_version;]$(echo ${PACKAGE_VERSION})"
          echo "##[set-output name=version;]$(echo ${VERSION})"

          echo "Publishing"
          rm -rf build *.egg-info dist/*
          python setup.py build sdist bdist_wheel
          twine upload --verbose --non-interactive dist/*
          rm -rf build *.egg-info dist/* dist
